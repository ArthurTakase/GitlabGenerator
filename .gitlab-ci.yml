stages:
  - prepare_grails_project
  - version
  - test
  - build
  - deploy
  - portainer
  - tickets

image: gradle:alpine

variables:
  PYTHON_VERSION_URL: "https://raw.githubusercontent.com/ArthurTakase/GitlabGenerator/main/version.py"
  PYTHON_TICKET_URL: "https://raw.githubusercontent.com/ArthurTakase/GitlabGenerator/main/ticket.py"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - chmod +x gradlew

# ------------------------------------
# PREPARE GRADLE PROJECT
# ------------------------------------

prepare_grails_project:
  variables:
    GIT_STRATEGY: fetch
  stage: prepare_grails_project
  script:
    - ./gradlew clean
  tags:
    - dockerswarm

# ------------------------------------
# TESTS UNITAIRES ET D'INTEGRATION
# ------------------------------------

unit-test:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - ./gradlew test
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
  rules:
    - if: ($TESTS == "true")
      when: always
  tags:
    - dockerswarm
  allow_failure: true

integration-test:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - ./gradlew integrationTest
  artifacts:
    when: always
    reports:
      junit: build/test-results/integrationTest/**/TEST-*.xml
  rules:
    - if: ($TESTS == "true")
      when: always
  tags:
    - dockerswarm
  allow_failure: true

# ------------------------------------
# BUILD
# ------------------------------------

build:
  variables:
    GIT_STRATEGY: none
  stage: build
  script:
    - ./gradlew assemble --refresh-dependencies
  tags:
    - dockerswarm

# ------------------------------------
# VERSIONNING
# ------------------------------------

update_version_snapshot:
  stage: version
  variables:
    GIT_STRATEGY: none
  script:
    - wget $PYTHON_VERSION_URL
    - chmod +x version.py
    - version_number=$(echo $(git log -1 --pretty=%B) | python3 ./version.py "$NEXUS_URL")
    - echo "Update to $version_number"
  rules:
    - if: ($CI_COMMIT_REF_NAME == $DEV_BRANCH && $CI_COMMIT_REF_NAME != $PROD_BRANCH && $NEXUS_URL)
      when: always
  tags:
    - dockerswarm

update_version_release:
  stage: version
  variables:
    GIT_STRATEGY: none
  script:
    - wget $PYTHON_VERSION_URL
    - chmod +x version.py
    - echo $(git log -1 --pretty=%B) | python3 ./version.py release "$NEXUS_URL"
  rules:
    - if: ($CI_COMMIT_REF_NAME != $DEV_BRANCH && $CI_COMMIT_REF_NAME == $PROD_BRANCH && $NEXUS_URL)
      when: always
  tags:
    - dockerswarm

# ------------------------------------
# DEPLOY
# ------------------------------------

deploy_nexus_va:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  dependencies:
    - build
  script:
    - ./gradlew removeAll --stacktrace --info
  rules:
    - if: ($CI_COMMIT_REF_NAME == $DEV_BRANCH && $CI_COMMIT_REF_NAME != $PROD_BRANCH)
      when: always
  tags:
    - dockerswarm

deploy_nexus_prod:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  dependencies:
    - build
  script:
    - ./gradlew removeAll --stacktrace --info
  rules:
    - if: ($CI_COMMIT_REF_NAME != $DEV_BRANCH && $CI_COMMIT_REF_NAME == $PROD_BRANCH)
      when: always
  tags:
    - dockerswarm

# ------------------------------------
# PORTAINER
# ------------------------------------

check_portainer_va:
  stage: portainer
  variables:
    GIT_STRATEGY: none
  script:
    - curl --data "test=test" "$WEBHOOK_DEV"
  rules:
    - if: ($WEBHOOK_DEV && $CI_COMMIT_REF_NAME == $DEV_BRANCH && $CI_COMMIT_REF_NAME != $PROD_BRANCH)
      when: always
  tags:
    - dockerswarm

check_portainer_prod:
  stage: portainer
  variables:
    GIT_STRATEGY: none
  script:
    - curl --data "test=test" "$WEBHOOK_PROD"
  rules:
    - if: ($WEBHOOK_PROD && $CI_COMMIT_REF_NAME != $DEV_BRANCH && $CI_COMMIT_REF_NAME == $PROD_BRANCH)
      when: always
  tags:
    - dockerswarm

# ------------------------------------
# TICKETS
# ------------------------------------

manage_tickets:
  stage: tickets
  variables:
    GIT_STRATEGY: none
  script:
    - cat /etc/os-release
    - lsb_release -a
    - hostnamectl
    - echo $SUDO_PSWD | sudo -S apt-get update
    - echo $SUDO_PSWD | sudo -S apt-get install -y pip
    - pip install --upgrade python-gitlab
    - wget $PYTHON_TICKET_URL
    - chmod +x ticket.py
    - python3 ./ticket.py $TOKEN $CI_PROJECT_ID $CI_COMMIT_BRANCH
  rules:
    - if: ($TOKEN)
      when: always
  tags:
    - dockerswarm

manage_tickets_merge:
  stage: tickets
  variables:
    GIT_STRATEGY: none
  script:
    - pip install --upgrade python-gitlab
    - wget $PYTHON_TICKET_URL
    - chmod +x ticket.py
    - python3 ./ticket.py $TOKEN $CI_PROJECT_ID $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME $CI_COMMIT_BRANCH $PROD_BRANCH $DEV_BRANCH
  rules:
    - if: ($TOKEN && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
  tags:
    - dockerswarm